plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'java-gradle-plugin'
    id 'maven'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.5'
}

apply plugin: 'kotlin-kapt'

group 'com.theapache64'
def theVersion = "1.0.0"
version "$theVersion"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}



dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // JUnit:JUnit is a unit testing framework for Java, created by Erich Gamma and Kent Beck.
    testImplementation 'junit:junit:4.13'

    // Expekt:BDD assertion library for Kotlin
    testImplementation 'com.theapache64:expekt:0.0.1'

    // Webcam Capture:This library allows you to use your PC webcam, IP or network cameras directly from Java. It's compatible with most operating systems (Windows, Linux, MacOS).
    implementation 'com.github.sarxos:webcam-capture:0.3.12'

	// Dagger:A fast dependency injector for Android and Java.
	implementation 'com.google.dagger:dagger:2.27'

	// Dagger Compiler:A fast dependency injector for Android and Java.
	kapt 'com.google.dagger:dagger-compiler:2.27'

	// Kotlinx Coroutines Core:Coroutines support libraries for Kotlin
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "shifarshifz"
            name "shifarshifz"
            email "theapache64@gmail.com"
        }
    }

    scm {
        url "https://github.com/theapache64/lol-gradle"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'com.theapache64'
            artifactId 'lol-gradle'
            version "$theVersion"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Capture the gradle face ;)')
                root.appendNode('name', 'lol-gradle')
                root.appendNode('url', 'https://github.com/theapache64/lol-gradle')
                root.children().last() + pomConfig
            }
        }
    }
}


gradlePlugin {
    plugins {
        lolGradlePlugin {
            id = 'com.theapache64.lol-gradle'
            implementationClass = 'com.theapache64.lolgradle.LolGradlePlugin'
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['mavenPublication']

    pkg {
        repo = 'maven'
        name = 'lol-gradle'
        userOrg = 'shifarshifz'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/theapache64/lol-gradle.git'
        version {
            name = "$theVersion"
            desc = "$theVersion"
            released = new Date()
        }
    }

}

sourceSets {
    functionalTests {
        kotlin.srcDir file('src/funcTests/kotlin')
        resources.srcDir file('src/funcTests/resources')
        compileClasspath += sourceSets.main.output + configurations.testCompileClasspath
        runtimeClasspath += output + compileClasspath + configurations.testRuntimeClasspath
    }
}

task functionalTest(type: Test){
    description = 'Runs the functional tests'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTests.output.classesDirs
    classpath = sourceSets.functionalTests.runtimeClasspath
}

check.dependsOn functionalTest

